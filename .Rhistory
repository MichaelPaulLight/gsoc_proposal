)
print(summary(model_5_imputed))
# 2. Posterior Predictive Checks
pp_check(model_5_imputed)
# 3. LOOIC
loo_result <- loo(model_5_imputed)
print(loo_result)
# 4. Posterior Distributions
plot(model_5_imputed)
# Custom posterior plot
mcmc_areas(model_5_imputed, pars = c("b_mortality_rate_facility", "b_n_dialysis_stations", "b_five_star", "b_patient_experience_rating", "b_staff_rating"))
# 5. Conditional Effects
plot(conditional_effects(model_5_imputed))
# 6. Residual Diagnostics
residuals <- residuals(model_5_imputed)
plot(fitted(model_5_imputed), residuals, main="Residuals vs Fitted")
abline(h=0, col="red")
# 7. R-squared
print(bayes_R2(model_5_imputed))
# 9. Posterior Predictive Distribution
predictions <- predict(model_5_imputed)
head(predictions)
library(ggdist)
city_effects <- ranef(model_5_imputed)$city[, , "Intercept"]
city_effects_df <- data.frame(
city = rownames(city_effects),
estimate = city_effects[, "Estimate"],
lower = city_effects[, "Q2.5"],
upper = city_effects[, "Q97.5"]
)
# 1. Pointrange plot (similar to a caterpillar plot)
ggplot(city_effects_df, aes(y = reorder(city, estimate))) +
stat_slabinterval(aes(x = estimate)) +
labs(title = "City Random Effects",
x = "Effect Estimate",
y = "City") +
theme_minimal()
# 2. Density plot of county random effects
ggplot(city_effects_df, aes(x = estimate)) +
stat_slabinterval() +
labs(title = "Distribution of County Random Effects",
x = "Effect Estimate",
y = "Density") +
theme_minimal()
# 3. Ridgeline plot
# For this, we need to simulate draws from the posterior
# county_effects_draws <- as_draws_df(model_1, variable = county
# )
# county_effects_long <- county_effects_draws %>%
#   pivot_longer(cols = starts_with("r_county"),
#                names_to = "county",
#                values_to = "effect") %>%
#   mutate(county = gsub("r_county\\[(.+),Intercept\\]", "\\1", county))
#
# ggplot(county_effects_long, aes(x = effect, y = county)) +
#   stat_density_ridges(quantile_lines = TRUE, quantiles = 2) +
#   labs(title = "Distribution of County Random Effects",
#        x = "Effect Estimate",
#        y = "County") +
#   theme_minimal()
# 4. Interval plot
ggplot(county_effects_df, aes(y = reorder(county, estimate))) +
stat_interval(aes(x = estimate, xmin = lower, xmax = upper)) +
labs(title = "County Random Effects with Uncertainty",
x = "Effect Estimate",
y = "County") +
theme_minimal()
county_effects <- ranef(model_5_imputed)$county[, , "Intercept"]
county_effects_df <- data.frame(
county = rownames(county_effects),
estimate = county_effects[, "Estimate"],
lower = county_effects[, "Q2.5"],
upper = county_effects[, "Q97.5"]
)
# 1. Pointrange plot (similar to a caterpillar plot)
ggplot(county_effects_df, aes(y = reorder(county, estimate))) +
stat_slabinterval(aes(x = estimate), point_interval = "median_qi") +
labs(title = "County Random Effects",
x = "Effect Estimate",
y = "County") +
theme_minimal()
# 2. Density plot of county random effects
ggplot(county_effects_df, aes(x = estimate)) +
stat_halfeye() +
labs(title = "Distribution of County Random Effects",
x = "Effect Estimate",
y = "Density") +
theme_minimal()
# 3. Ridgeline plot
# For this, we need to simulate draws from the posterior
# county_effects_draws <- as_draws_df(model_1, variable = county
# )
# county_effects_long <- county_effects_draws %>%
#   pivot_longer(cols = starts_with("r_county"),
#                names_to = "county",
#                values_to = "effect") %>%
#   mutate(county = gsub("r_county\\[(.+),Intercept\\]", "\\1", county))
#
# ggplot(county_effects_long, aes(x = effect, y = county)) +
#   stat_density_ridges(quantile_lines = TRUE, quantiles = 2) +
#   labs(title = "Distribution of County Random Effects",
#        x = "Effect Estimate",
#        y = "County") +
#   theme_minimal()
# 4. Interval plot
ggplot(county_effects_df, aes(y = reorder(county, estimate))) +
stat_interval(aes(x = estimate, xmin = lower, xmax = upper)) +
labs(title = "County Random Effects with Uncertainty",
x = "Effect Estimate",
y = "County") +
theme_minimal()
county_effects
county_effects_df
# 5. Conditional Effects
plot(conditional_effects(model_3_city_complete_case))
model_4.1_formula <- bf(
formula = vote_count ~ five_star +
patient_experience_rating +
mortality_rate_facility +
n_dialysis_stations +
staff_rating +
mo(hospital_readmission) +
(1 | county) +
(1 | city)
)
model_4.1_imputed <- brm_multiple(
formula = model_4.1_formula,
family = negbinomial(),
data = imp,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
file = "../006_models/dialysis_model_4.1_imputed"
)
print(summary(model_4.1_imputed))
print(summary(model_4.1_imputed))
# 2. Posterior Predictive Checks
pp_check(model_4.1_imputed)
# 3. LOOIC
loo_result <- loo(model_4.1_imputed)
print(loo_result)
# 4. Posterior Distributions
plot(model_4.1_imputed)
# Custom posterior plot
mcmc_areas(model_4.1_imputed, pars = c("b_mortality_rate_facility", "b_n_dialysis_stations", "b_five_star", "b_patient_experience_rating", "b_staff_rating"))
# 5. Conditional Effects
plot(conditional_effects(model_4.1_imputed))
# 6. Residual Diagnostics
residuals <- residuals(model_4.1_imputed)
plot(fitted(model_4.1_imputed), residuals, main="Residuals vs Fitted")
abline(h=0, col="red")
# 7. R-squared
# print(bayes_R2(model_5_imputed))
# 9. Posterior Predictive Distribution
predictions <- predict(model_4.1_imputed)
head(predictions)
filtered_city_df_5 <- (
city_df
|> mutate(mortality_rate_facility = as.numeric(mortality_rate_facility),
n_dialysis_stations = as.numeric(`_of_dialysis_stations`),
staff_rating = as.numeric(linearized_score_of_rating_of_the_dialysis_center_staff),
five_star = as.numeric(five_star),
patient_experience_rating = as.numeric(ich_cahps_survey_of_patients_experiences_star_rating))
|> mutate(hospital_readmission = factor(patient_hospital_readmission_category,
levels = c("Worse than Expected",
"As Expected",
"Better than Expected",
"Not Available"),
ordered = TRUE))
|> filter(!is.na(city), year %in% c(2022, 2020, 2018))
|> group_by(year, provider_number, county, city)
|> summarize(
total_votes = sum(vote_count),
yes_votes = sum(vote_count[vote_type == "yes"]),
vote_perc = yes_votes / total_votes * 100,
five_star = first(five_star),
mortality_rate_facility = first(mortality_rate_facility),
staff_rating = first(staff_rating),
patient_experience_rating = first(patient_experience_rating),
n_dialysis_stations = first(n_dialysis_stations),
hospital_readmission = first(hospital_readmission)
)
|> ungroup()
|> select(year, provider_number, county, city, five_star, mortality_rate_facility, staff_rating, patient_experience_rating, n_dialysis_stations, hospital_readmission, vote_perc)
|> distinct()
)
View(filtered_city_df_5)
filtered_city_df_5 <- (
city_df
|> mutate(mortality_rate_facility = as.numeric(mortality_rate_facility),
n_dialysis_stations = as.numeric(`_of_dialysis_stations`),
staff_rating = as.numeric(linearized_score_of_rating_of_the_dialysis_center_staff),
five_star = as.numeric(five_star),
patient_experience_rating = as.numeric(ich_cahps_survey_of_patients_experiences_star_rating))
|> mutate(hospital_readmission = factor(patient_hospital_readmission_category,
levels = c("Worse than Expected",
"As Expected",
"Better than Expected",
"Not Available"),
ordered = TRUE))
|> filter(!is.na(city), year %in% c(2022, 2020, 2018))
|> group_by(year, provider_number, county, city)
|> summarize(
total_votes = sum(vote_count),
yes_votes = sum(vote_count[vote_type == "yes"]),
vote_perc = yes_votes / total_votes * 100,
five_star = first(five_star),
mortality_rate_facility = first(mortality_rate_facility),
staff_rating = first(staff_rating),
patient_experience_rating = first(patient_experience_rating),
n_dialysis_stations = first(n_dialysis_stations),
hospital_readmission = first(hospital_readmission)
)
|> ungroup()
|> select(year, provider_number, county, city, five_star, mortality_rate_facility, staff_rating, patient_experience_rating, n_dialysis_stations, hospital_readmission, vote_perc)
|> distinct()
)
imp_perc <- mice(filtered_city_df_5, m = 5, seed = 123)
model_6_formula <- bf(
formula = vote_perc ~ five_star +
patient_experience_rating +
mortality_rate_facility +
n_dialysis_stations +
staff_rating +
(1 | county) +
(1 | city)
)
model_6_imputed <- brm_multiple(
formula = model_6_formula,
family = negbinomial(),
data = imp_perc,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
file = "../006_models/dialysis_model_6_imputed"
)
glimpse(filtered_city_df_5)
model_6_formula <- bf(
formula = vote_perc ~ five_star +
patient_experience_rating +
mortality_rate_facility +
n_dialysis_stations +
staff_rating +
(1 | county) +
(1 | city)
)
model_6_imputed <- brm_multiple(
formula = model_6_formula,
family = gaussian(),
data = imp_perc,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
file = "../006_models/dialysis_model_6_imputed"
)
print(summary(model_6_imputed))
# 2. Posterior Predictive Checks
pp_check(model_6_imputed)
# 3. LOOIC
loo_result <- loo(model_6_imputed)
print(loo_result)
# 4. Posterior Distributions
plot(model_6_imputed)
# Custom posterior plot
mcmc_areas(model_6_imputed, pars = c("b_mortality_rate_facility", "b_n_dialysis_stations", "b_five_star", "b_patient_experience_rating", "b_staff_rating"))
# 5. Conditional Effects
plot(conditional_effects(model_6_imputed))
# 6. Residual Diagnostics
residuals <- residuals(model_6_imputed)
plot(fitted(model_6_imputed), residuals, main="Residuals vs Fitted")
abline(h=0, col="red")
# 7. R-squared
# print(bayes_R2(model_5_imputed))
# 9. Posterior Predictive Distribution
predictions <- predict(model_6_imputed)
head(predictions)
model_7_imputed <- brm_multiple(
formula = model_6_formula,
family = student(),
data = imp_perc,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
file = "../006_models/dialysis_model_7_imputed"
)
print(summary(model_7_imputed))
# 2. Posterior Predictive Checks
pp_check(model_7_imputed)
# 3. LOOIC
loo_result <- loo(model_7_imputed)
print(loo_result)
# 4. Posterior Distributions
plot(model_7_imputed)
# Custom posterior plot
mcmc_areas(model_7_imputed, pars = c("b_mortality_rate_facility", "b_n_dialysis_stations", "b_five_star", "b_patient_experience_rating", "b_staff_rating"))
# 5. Conditional Effects
plot(conditional_effects(model_7_imputed))
# 6. Residual Diagnostics
residuals <- residuals(model_7_imputed)
plot(fitted(model_7_imputed), residuals, main="Residuals vs Fitted")
abline(h=0, col="red")
# 7. R-squared
# print(bayes_R2(model_5_imputed))
# 9. Posterior Predictive Distribution
predictions <- predict(model_7_imputed)
head(predictions)
filtered_city_df_5_complete <- (
city_df
|> mutate(mortality_rate_facility = as.numeric(mortality_rate_facility),
n_dialysis_stations = as.numeric(`_of_dialysis_stations`),
staff_rating = as.numeric(linearized_score_of_rating_of_the_dialysis_center_staff),
five_star = as.numeric(five_star),
patient_experience_rating = as.numeric(ich_cahps_survey_of_patients_experiences_star_rating))
|> mutate(hospital_readmission = factor(patient_hospital_readmission_category,
levels = c("Worse than Expected",
"As Expected",
"Better than Expected",
"Not Available"),
ordered = TRUE))
|> filter(!is.na(city), year %in% c(2022, 2020, 2018))
|> group_by(year, provider_number, county, city)
|> summarize(
total_votes = sum(vote_count),
yes_votes = sum(vote_count[vote_type == "yes"]),
vote_perc = yes_votes / total_votes * 100,
five_star = first(five_star),
mortality_rate_facility = first(mortality_rate_facility),
staff_rating = first(staff_rating),
patient_experience_rating = first(patient_experience_rating),
n_dialysis_stations = first(n_dialysis_stations),
hospital_readmission = first(hospital_readmission)
)
|> ungroup()
|> select(year, provider_number, county, city, five_star, mortality_rate_facility, staff_rating, patient_experience_rating, n_dialysis_stations, hospital_readmission, vote_perc)
|> distinct()
|> drop_na()
)
filtered_city_df_5_complete <- (
city_df
|> mutate(mortality_rate_facility = as.numeric(mortality_rate_facility),
n_dialysis_stations = as.numeric(`_of_dialysis_stations`),
staff_rating = as.numeric(linearized_score_of_rating_of_the_dialysis_center_staff),
five_star = as.numeric(five_star),
patient_experience_rating = as.numeric(ich_cahps_survey_of_patients_experiences_star_rating))
|> mutate(hospital_readmission = factor(patient_hospital_readmission_category,
levels = c("Worse than Expected",
"As Expected",
"Better than Expected",
"Not Available"),
ordered = TRUE))
|> filter(!is.na(city), year %in% c(2022, 2020, 2018))
|> group_by(year, provider_number, county, city)
|> summarize(
total_votes = sum(vote_count),
yes_votes = sum(vote_count[vote_type == "yes"]),
vote_perc = yes_votes / total_votes * 100,
five_star = first(five_star),
mortality_rate_facility = first(mortality_rate_facility),
staff_rating = first(staff_rating),
patient_experience_rating = first(patient_experience_rating),
n_dialysis_stations = first(n_dialysis_stations),
hospital_readmission = first(hospital_readmission)
)
|> ungroup()
|> select(year, provider_number, county, city, five_star, mortality_rate_facility, staff_rating, patient_experience_rating, n_dialysis_stations, vote_perc)
|> distinct()
|> drop_na()
)
filtered_city_df_5_complete <- (
city_df
|> mutate(mortality_rate_facility = as.numeric(mortality_rate_facility),
n_dialysis_stations = as.numeric(`_of_dialysis_stations`),
staff_rating = as.numeric(linearized_score_of_rating_of_the_dialysis_center_staff),
five_star = as.numeric(five_star),
patient_experience_rating = as.numeric(ich_cahps_survey_of_patients_experiences_star_rating))
|> mutate(hospital_readmission = factor(patient_hospital_readmission_category,
levels = c("Worse than Expected",
"As Expected",
"Better than Expected",
"Not Available"),
ordered = TRUE))
|> filter(!is.na(city), year %in% c(2022, 2020, 2018))
|> group_by(year, provider_number, county, city)
|> summarize(
total_votes = sum(vote_count),
yes_votes = sum(vote_count[vote_type == "yes"]),
vote_perc = yes_votes / total_votes * 100,
five_star = first(five_star),
mortality_rate_facility = first(mortality_rate_facility),
staff_rating = first(staff_rating),
patient_experience_rating = first(patient_experience_rating),
n_dialysis_stations = first(n_dialysis_stations),
hospital_readmission = first(hospital_readmission)
)
|> ungroup()
|> select(year, provider_number, county, city, five_star, mortality_rate_facility, staff_rating, patient_experience_rating, n_dialysis_stations, hospital_readmission, vote_perc)
|> distinct()
|> drop_na()
)
model_8 <- brm(
formula = model_6_formula,
family = student(),
data = filtered_city_df_5_complete,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
file = "../006_models/dialysis_model_8"
)
print(summary(model_8))
# 2. Posterior Predictive Checks
pp_check(model_8)
# 3. LOOIC
loo_result <- loo(model_8)
print(loo_result)
# 4. Posterior Distributions
plot(model_8)
# Custom posterior plot
mcmc_areas(model_8, pars = c("b_mortality_rate_facility", "b_n_dialysis_stations", "b_five_star", "b_patient_experience_rating", "b_staff_rating"))
# 5. Conditional Effects
plot(conditional_effects(model_8))
# 6. Residual Diagnostics
residuals <- residuals(model_8)
plot(fitted(model_8), residuals, main="Residuals vs Fitted")
abline(h=0, col="red")
# 7. R-squared
# print(bayes_R2(model_5_imputed))
# 9. Posterior Predictive Distribution
predictions <- predict(model_8)
head(predictions)
model_7_formula <- bf(
formula = vote_perc ~ five_star +
patient_experience_rating +
mortality_rate_facility +
n_dialysis_stations +
staff_rating +
mo(hospital_readmission) +
(1 | county) +
(1 | city)
)
model_9 <- brm(
formula = model_7_formula,
family = student(),
data = filtered_city_df_5_complete,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
file = "../006_models/dialysis_model_9"
)
print(summary(model_9))
# 2. Posterior Predictive Checks
pp_check(model_9)
# 3. LOOIC
loo_result <- loo(model_9)
print(loo_result)
# 4. Posterior Distributions
plot(model_9)
# Custom posterior plot
mcmc_areas(model_9, pars = c("b_mortality_rate_facility", "b_n_dialysis_stations", "b_five_star", "b_patient_experience_rating", "b_staff_rating"))
# 5. Conditional Effects
plot(conditional_effects(model_9))
# 6. Residual Diagnostics
residuals <- residuals(model_9)
plot(fitted(model_9), residuals, main="Residuals vs Fitted")
abline(h=0, col="red")
# 7. R-squared
# print(bayes_R2(model_5_imputed))
# 9. Posterior Predictive Distribution
predictions <- predict(model_9)
head(predictions)
usethis::use_tidy_contributing()
setwd("~/Documents/GitHub/gsoc_proposal")
library(googlesheets4)
timeline <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0")
install.packages("gt")
timeline |> gt()
library(gt)
timeline |> gt()
timeline |> gt() |>
fmt_date(columns = Date, date_style = "wd_m_day_year")
timeline <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0")
timeline |> gt() |>
fmt_date(columns = Date, date_style = "wd_m_day_year")
timeline <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0")
timeline <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0")
timeline |> gt() |>
fmt_date(columns = Date, date_style = "wd_m_day_year")
library(googlesheets4)
library(gt)
timeline <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0", sheet = 2)
timeline |> gt() |>
fmt_date(columns = deadline, date_style = "wd_m_day_year")
library(googlesheets4)
library(gt)
deliverables <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0", sheet = 2)
deliverables |> gt() |>
fmt_date(columns = deadline, date_style = "wd_m_day_year")
setwd("~/Documents/GitHub/gsoc_proposal")
quarto::quarto_render("proposal.qmd")
quarto::quarto_render("proposal.qmd", output_format = "pdf")
quarto::quarto_render("proposal.qmd", output_format = "pdf")
quarto::quarto_render("proposal.qmd", output_format = "pdf")
quarto::quarto_render("proposal.qmd", output_format = "pdf")
rlang::last_trace()
install.packages("quarto")
install.packages("quarto")
quarto::quarto_render("proposal.qmd", output_format = "pdf")
